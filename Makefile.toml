[config]
default_to_workspace = false

[tasks.check]
env = {RUSTFLAGS = "-Z macro-backtrace" }
command = "cargo"
args = ["check", "--all-features", "--all-targets"]

[tasks.format]
dependencies = []
command = "cargo"
args = ["fmt"]

[tasks.kernel]
env = {RUSTFLAGS = "-Z macro-backtrace" }
toolchain = "nightly"
command = "cargo"
args = [
    "rustc",
    "--lib",
    "--manifest-path=compound_prism_designer_kernel/Cargo.toml",
    "--release",
    "--target=nvptx64-nvidia-cuda.json",
    "--target-dir", "target/gpu-target",
    "-Z", "build-std=core",
    "--",
    "-Cllvm-args=--nvptx-fma-level=2",
    "-Cllvm-args=--nvptx-prec-divf32=0",
    "-Cllvm-args=--nvptx-prec-sqrtf32=0",
    "-Cllvm-args=--nvptx-sched4reg",
    "-Cllvm-args=--mul-constant-optimization",
    "-Cllvm-args=--enable-local-reassign",
    # "-Cllvm-args=--enable-dse-memoryssa",
    "-Cllvm-args=--inline-threshold=4096",
    "--emit=asm=src/kernel.ptx,llvm-ir=kernel.ll,mir=kernel.mir",
    "-Cpasses=mem2reg memcpyopt sroa dot-cfg",
    "-Copt-level=3",
    # "-Cdebuginfo=2",
    "-Clto",
    "-Cembed-bitcode=yes",
    "-Ctarget-cpu=sm_52",
    "-Ctarget-feature=+ptx72",
    "-Clinker=echo",
    "-Z", "print-llvm-passes",
    "-Z", "no-link",
    "-Z", "mir-opt-level=4",
    "-Z", "fuel=compound_prism_designer_kernel=100024",
    "-Z", "combine_cgu",
    "-Z", "mutable-noalias=yes",
    "-Z", "inline-mir=yes",
    "-Z", "new-llvm-pass-manager=yes",
    "-Z", "unsound-mir-opts=yes",
]

[tasks.verify-kernel]
dependencies = ["kernel"]
command = "ptxas"
args = ["-v", "-arch=sm_52", "src/kernel.ptx"]

[tasks.shader]
# env = { "RUSTFLAGS" = "-Zcodegen-backend=/home/julia/Repos/rust-gpu/target/release/librustc_codegen_spirv.so -Zsymbol-mangling-version=v0 -Ccodegen-units=1 -Ctarget-feature=+GenericPointer,+VariablePointers,+Addresses,+Int8,+Int16,+Int64,+ext:SPV_KHR_variable_pointers -Zmir-opt-level=4" }
env = { "RUSTFLAGS" = "-Zcodegen-backend=/home/julia/Repos/rust-gpu/target/release/librustc_codegen_spirv.so -Clto=off -Zinline-mir-threshold=1000000 -Zmir-opt-level=4 -Zunsound-mir-opts -Ctarget-feature=+Shader,+GenericPointer,+VariablePointers,+Addresses,+Int8,+Int16,+Int64,+Groups,+GroupNonUniformBallot,+GroupNonUniformVote,+GroupNonUniformShuffle,+GroupNonUniformArithmetic,+ext:SPV_KHR_variable_pointers,+Linkage" }
toolchain = "nightly"
command = "cargo"
args = [
    "rustc",
    "--release",
    "--manifest-path=compound_prism_designer_kernel/Cargo.toml",
    "--lib",
    "--target=spirv-unknown-spv1.5",
    "--target-dir", "target/shader-target",
    "-Z", "build-std=core",
    "-Z", "build-std-features=compiler-builtins-mem",
    "--",
    "-Zcodegen-backend=/home/julia/Repos/rust-gpu/target/release/librustc_codegen_spirv.so",
    "-Zsymbol-mangling-version=v0",
    "-Ccodegen-units=1",
    "-Ctarget-feature=+Shader,+GenericPointer,+VariablePointers,+Addresses,+Int8,+Int16,+Int64,+Groups,+GroupNonUniformBallot,+GroupNonUniformVote,+GroupNonUniformShuffle,+GroupNonUniformArithmetic,+ext:SPV_KHR_variable_pointers,+Linkage",
    "-Zmir-opt-level=4",
]

[tasks.bench]
env = {RUSTFLAGS = "-Ctarget-feature=+fma -Ctarget-cpu=native" }
command = "cargo"
args = ["criterion", "--features=cuda", "-p", "compound_prism_designer"]

[tasks.test]
command = "cargo"
args = ["test", "--workspace", "--exclude", "compound_prism_designer_kernel"]

[tasks.test-derive]
env = { RUST_BACKTRACE = "full" }
command = "cargo"
args = ["test", "--package", "derive-wrapped-from", "--lib", "--", "--nocapture"]

[tasks.build-python]
command = "maturin"
args = [
    "build",
    "--release",
    "--no-sdist",
    "--manylinux=off",
    "--rustc-extra-args=-Ctarget-feature=+fma",
    "--cargo-extra-args=\"--features=pyext\""
]

[tasks.python-develop]
command = "maturin"
args = [
    "develop",
    "--release",
    "--rustc-extra-args=-Ctarget-feature=+fma -Ctarget-cpu=native -Cdebug-assertions=yes",
    "--cargo-extra-args=\"--features=pyext\""
]

[tasks.flow-build]
dependencies = [
    "format",
    "kernel",
    "build-python",
]

[tasks.flow-develop]
dependencies = [
    "format",
    "kernel",
    "verify-kernel",
    "python-develop",
]
