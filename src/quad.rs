#![allow(clippy::unreadable_literal, clippy::excessive_precision)]

/// Numerical Integration using Gauss Quadrature without error estimation
pub trait Quadrature {
    const X: &'static [f64];
    const W: &'static [f64];

    // func = |x: f64| ...
    // out = 0
    // f = |x: f64, w: f64| out += func(x) * w
    // out == Integrate[func(x), {x, a, b}]
    fn inplace_integrate<F: FnMut(f64, f64)>(mut f: F, a: f64, b: f64, divisions: usize) {
        let divisions = divisions.max(1);
        // Gaussian quadrature rule requires that the interval is [-1, 1]
        // so a change of interval is required
        // Integrate[f(x), {x, a, b}] => c_1 Sum[Sum[w_i * f(c_1 * x_i + c_2, {i, 1, n}], {_, 1, d}]
        // where d = # of divisions; s = (b - a) / d; c_1 = s / 2; c_2 = c_1 + a + s * (i - 1)
        let skip = (b - a) / (divisions as f64);
        let c_1 = skip / 2.;
        let mut c_2 = c_1 + a;
        for _ in 0..divisions {
            for (x, w) in Self::X.iter().copied().zip(Self::W.iter().copied()) {
                f(c_1 * x + c_2, w * c_1);
            }
            c_2 += skip;
        }
    }

    // f = |x: f64| ...
    // Integrate[f(x), {x, a, b}]
    fn integrate<F: Fn(f64) -> f64>(f: F, a: f64, b: f64, subdivisions: usize) -> f64 {
        let mut integrator = 0_f64;
        Self::inplace_integrate(|x, w| integrator += f(x) * w, a, b, subdivisions);
        integrator
    }
}

/// Gaussâ€“Kronrod Integration using 21-point Kronrod rule without error estimation
pub struct KR21;

impl Quadrature for KR21 {
    const X: &'static [f64] = &[
        -9.956571630258080807355272806890028e-01,
        -9.739065285171717200779640120844521e-01,
        -9.301574913557082260012071800595083e-01,
        -8.650633666889845107320966884234930e-01,
        -7.808177265864168970637175783450424e-01,
        -6.794095682990244062343273651148736e-01,
        -5.627571346686046833390000992726941e-01,
        -4.333953941292471907992659431657842e-01,
        -2.943928627014601981311266031038656e-01,
        -1.488743389816312108848260011297200e-01,
        0.0,
        1.488743389816312108848260011297200e-01,
        2.943928627014601981311266031038656e-01,
        4.333953941292471907992659431657842e-01,
        5.627571346686046833390000992726941e-01,
        6.794095682990244062343273651148736e-01,
        7.808177265864168970637175783450424e-01,
        8.650633666889845107320966884234930e-01,
        9.301574913557082260012071800595083e-01,
        9.739065285171717200779640120844521e-01,
        9.956571630258080807355272806890028e-01,
    ];
    const W: &'static [f64] = &[
        1.169463886737187427806439606219205e-02,
        3.255816230796472747881897245938976e-02,
        5.475589657435199603138130024458018e-02,
        7.503967481091995276704314091619001e-02,
        9.312545458369760553506546508336634e-02,
        1.093871588022976418992105903258050e-01,
        1.234919762620658510779581098310742e-01,
        1.347092173114733259280540017717068e-01,
        1.427759385770600807970942731387171e-01,
        1.477391049013384913748415159720680e-01,
        1.494455540029169056649364683898212e-01,
        1.477391049013384913748415159720680e-01,
        1.427759385770600807970942731387171e-01,
        1.347092173114733259280540017717068e-01,
        1.234919762620658510779581098310742e-01,
        1.093871588022976418992105903258050e-01,
        9.312545458369760553506546508336634e-02,
        7.503967481091995276704314091619001e-02,
        5.475589657435199603138130024458018e-02,
        3.255816230796472747881897245938976e-02,
        1.169463886737187427806439606219205e-02,
    ];
}
